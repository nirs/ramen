#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys

from drenv import kubectl

NAMESPACE = "kubevirt"


def deploy(cluster):
    print("Deploying kubevirt operator")
    kubectl.apply("--kustomize=operator", context=cluster)

    print("Waiting until virt-operator is rolled out")
    kubectl.rollout(
        "status",
        "deploy/virt-operator",
        f"--namespace={NAMESPACE}",
        "--timeout=300s",
        context=cluster,
    )

    print("Deploying kubevirt cr")
    kubectl.apply("--kustomize=cr", context=cluster)

    create_public_key_secret(cluster)


def create_public_key_secret(cluster):
    """
    Create a secret with current user public key for accessing VM via ssh using
    access credentials API:
    https://kubevirt.io/user-guide/virtual_machines/accessing_virtual_machines/#static-ssh-public-key-injection-via-cloud-init
    """
    public_key = os.path.expanduser("~/.ssh/id_rsa.pub")
    print(f"Creating secret my-public-key using '{public_key}'")
    secret = kubectl.create(
        "secret",
        "generic",
        "my-public-key",
        f"--from-file=key1={public_key}",
        "--dry-run=client",
        "--output=yaml",
    )
    kubectl.apply("--filename=-", input=secret, context=cluster)


def wait(cluster):
    print("Waiting until kubevirt cr is available")
    kubectl.wait(
        "kubevirt.kubevirt.io/kubevirt",
        "--for=condition=available",
        f"--namespace={NAMESPACE}",
        "--timeout=300s",
        context=cluster,
    )


if len(sys.argv) != 2:
    print(f"Usage: {sys.argv[0]} cluster")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
cluster = sys.argv[1]

deploy(cluster)
wait(cluster)
